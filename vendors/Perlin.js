var PERLIN=PERLIN||Object.create(null);PERLIN.Generator=function(e){this._table=e||PERLIN.Generator.makeTable(255),this.octaves=10,this.frequency=.05,this.persistence=.5},PERLIN.Generator.random=function(){return Math.random()},PERLIN.Generator.makeTable=function(e){for(var t=[],r=0;e>r;++r)t[r]=PERLIN.Generator.random();return t},PERLIN.Generator.cosineInterpolate=function(e,t,r){var a=.5*(1-Math.cos(r*Math.PI));return(1-a)*e+a*t},PERLIN.Generator.prototype={_randify:function(e){return this._table[Math.floor(Math.abs(e)%this._table.length)]},_noise:function(e){for(var t=0,r=e.length,a=0;r>a;++a)t=this._randify(Math.floor(85e3*t)+e[a]);return t},_smooth:function(e,t){if(0>t)return this._noise(e);var r=e[t],a=Math.floor(r),n=r-a;e[t]=a;var o=this._smooth(e,t-1);e[t]=a+1;var i=this._smooth(e,t-1);return e[t]=r,PERLIN.Generator.cosineInterpolate(o,i,n)},_perlin:function(e){for(var t=0,r=1,a=this.octaves,n=this.frequency,o=this.persistence,i=e.slice(),h=i.length,s=0;a>s;++s){for(var c=4096*s,f=0;h>f;++f)i[f]=e[f]*n+c;t+=this._smooth(i,h-1)*r,r*=o,n*=2}var l=(1-o)/(1-r);return t*l},_generate:function(e,t,r,a){if(0>a)return r(e,this._perlin(e));for(var n=e[a]+t[a];n>e[a];++e[a])this._generate(e,t,r,a-1);return e[a]-=t[a],null},generate:function(e,t,r){this._generate(e,t,r,e.length-1)}};var PERLIN=PERLIN||Object.create(null);PERLIN.WebGLGenerator=function(e,t){this.width=e,this.height=t,this.gl=PERLIN.WebGLGenerator.createContext(e,t),this.data=new Float32Array(e*t)},PERLIN.WebGLGenerator.createContext=function(e,t){var r=e/2,a=t/2,n=document.createElement("canvas"),o=n.getContext("experimental-webgl",{preserveDrawingBuffer:!0});n.width=e,n.height=t;var i=o.createProgram();o.attachShader(i,PERLIN.WebGLGenerator.createShader(o,o.VERTEX_SHADER,PERLIN.WebGLGenerator.vShaderScript)),o.attachShader(i,PERLIN.WebGLGenerator.createShader(o,o.FRAGMENT_SHADER,PERLIN.WebGLGenerator.fShaderScript)),o.linkProgram(i),o.useProgram(i),o.clearColor(0,0,0,1),o.enable(o.DEPTH_TEST),o.viewport(0,0,e,t),o.clear(o.COLOR_BUFFER_BIT|o.DEPTH_BUFFER_BIT);var h=o.getUniformLocation(i,"Window");o.uniform2f(h,e,t);var s=[].concat([-r,-a,0],[r,-a,0],[-r,a,0],[r,a,0]),c=o.createBuffer();o.bindBuffer(o.ARRAY_BUFFER,c),o.bufferData(o.ARRAY_BUFFER,new Float32Array(s),o.STATIC_DRAW);var f=o.getAttribLocation(i,"VertexPosition");return o.enableVertexAttribArray(f),o.vertexAttribPointer(f,3,o.FLOAT,!1,0,0),o},PERLIN.WebGLGenerator.createShader=function(e,t,r){var a=e.createShader(t);if(e.shaderSource(a,r),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS))throw Error(e.getShaderInfoLog(a));return a},PERLIN.WebGLGenerator.prototype.generate=function(){this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4);var e=new Uint8Array(4*this.width*this.height);this.gl.readPixels(0,0,this.width,this.height,this.gl.RGBA,this.gl.UNSIGNED_BYTE,e);for(var t=0,r=0;e.length>t;t+=4,r+=1)this.data[r]=e[t]/255;return this},PERLIN.WebGLGenerator.prototype.get=function(e,t){return this.data[t*this.width+e]};PERLIN.WebGLGenerator.vShaderScript="attribute vec3 VertexPosition;void main(void){gl_Position=vec4(VertexPosition,1.0);}";PERLIN.WebGLGenerator.fShaderScript="precision highp float;"+"//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n"+"uniform vec2 Window;\n\nvoid main(void)\n{\n    vec2 coord = vec2(\n        gl_FragCoord.x / Window.x,\n        gl_FragCoord.y / Window.y\n    );\n\n    float noise = 1.0\n        * abs( snoise( coord ) )\n        * abs( snoise( coord * 2.0 ) )\n        * abs( snoise( coord * 4.0 ) )\n        * abs( snoise( coord * 8.0 ) )\n    ;\n\n    gl_FragColor = vec4(noise, 0.0, 0.0, 1.0);\n}\n";